// src/components/question/QuestionCard.tsx
import { Question } from '../../types';
import clsx from 'clsx';

interface QuestionCardProps {
  question: Question;
  isSelected: boolean;
  onSelect: () => void;
}

export default function QuestionCard({ question, isSelected, onSelect }: QuestionCardProps) {
  const getCategoryColor = (category: string) => {
    const colors: Record<string, string> = {
      'goals': 'from-green-500 to-green-600',
      'cards': 'from-yellow-500 to-yellow-600',
      'corners': 'from-blue-500 to-blue-600',
      'time': 'from-purple-500 to-purple-600',
      'player': 'from-pink-500 to-pink-600',
    };
    return colors[category] || 'from-gray-500 to-gray-600';
  };

  return (
    <div
      onClick={onSelect}
      className={clsx(
        "relative overflow-hidden rounded-xl p-6 cursor-pointer transition-all duration-300",
        isSelected ? "ring-4 ring-green-400 scale-[1.02]" : "hover:scale-[1.01]",
        "bg-gradient-to-br from-gray-800 to-gray-900"
      )}
    >
      {/* Category Badge */}
      <div className={`absolute top-0 right-0 px-3 py-1 text-xs font-medium text-white bg-gradient-to-r ${getCategoryColor(question.category)} rounded-bl-lg`}>
        {question.category.toUpperCase()}
      </div>

      {/* Question */}
      <h3 className="text-xl font-semibold text-white mb-4 pr-20">{question.text}</h3>

      {/* Options */}
      <div className="grid grid-cols-2 gap-3">
        {question.options.map((option) => (
          <div
            key={option.id}
            className={clsx(
              "p-3 rounded-lg border-2 transition-all",
              isSelected 
                ? "border-green-400 bg-green-400/10" 
                : "border-gray-700 hover:border-gray-600 bg-gray-800/50"
            )}
          >
            <p className="text-white font-medium text-sm">{option.text}</p>
            <p className="text-green-400 font-bold text-lg mt-1">{option.odds.toFixed(2)}</p>
          </div>
        ))}
      </div>

      {/* Timer */}
      <div className="mt-4 flex items-center gap-2 text-gray-400 text-sm">
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <span>Expires in 5 minutes</span>
      </div>
    </div>
  );
}